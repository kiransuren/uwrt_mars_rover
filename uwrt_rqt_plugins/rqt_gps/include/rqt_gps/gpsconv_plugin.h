#ifndef RQT_GPS_gpsconv_plugin_H
#define RQT_GPS_gpsconv_plugin_H

#include <rqt_gui_cpp/plugin.h>
#include <QLineEdit>
#include <QWidget>
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "ui_gpsconv_plugin.h"  //Autogenerated

#include <vector>

namespace rqt_gps {

class GPSConvPlugin : public rqt_gui_cpp::Plugin {
  Q_OBJECT
 public:
  GPSConvPlugin();
  void initPlugin(qt_gui_cpp::PluginContext& context) override;
  /* void shutdownPlugin() override;
  void saveSettings(qt_gui_cpp::Settings& plugin_settings,
      qt_gui_cpp::Settings& instance_settings) const override;
  void restoreSettings(const qt_gui_cpp::Settings& plugin_settings,
      const qt_gui_cpp::Settings& instance_settings) override;
  */
  static std::vector<double> dmsToDD(std::vector<double> inputLat, std::vector<double> inputLon);
  static std::vector<double> ddToDMS(double inputLat, double inputLon);
  // Comment in to signal that the plugin has a way to configure it
  // bool hasConfiguration() const;
  // void triggerConfiguration();

 public slots:
  void handleDDButton();
  void handleDMSButton();
  void handleDDPublishButton();
  void handleDMSPublishButton();

 private:
  Ui::GPSConvPluginWidget ui_{};
  QWidget* widget_ = new QWidget();
  ros::NodeHandle n;
  ros::Publisher DDGPS_pub;
  ros::Publisher DMSGPS_pub;
};
}  // namespace rqt_gps
#endif  // RQT_GPS_gpsconv_plugin_H
